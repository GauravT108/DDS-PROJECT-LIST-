#include <iostream>
#include <string>
#include <stack>

struct Book {
    std::string title;
    std::string author;
    bool isBorrowed;
    Book* next;
};

class BookInventory {
private:
    Book* head;

public:
    BookInventory() : head(nullptr) {}

    void addBook(const std::string& title, const std::string& author) {
        Book* newBook = new Book{title, author, false, head};
        head = newBook;
    }

    void displayBooks() {
        Book* current = head;
        std::cout << "Available Books:\n";
        while (current) {
            if (!current->isBorrowed) {
                std::cout << "Title: " << current->title << ", Author: " << current->author << "\n";
            }
            current = current->next;
        }
    }

    Book* searchBook(const std::string& searchTerm) {
        Book* current = head;
        while (current) {
            if (current->title == searchTerm || current->author == searchTerm) {
                return current;
            }
            current = current->next;
        }
        return nullptr;
    }

    void borrowBook(const std::string& title, std::stack<std::string>& actionStack) {
        Book* book = searchBook(title);
        if (book && !book->isBorrowed) {
            book->isBorrowed = true;
            actionStack.push("return " + title);
            std::cout << "You have borrowed: " << title << "\n";
        } else {
            std::cout << "Book not available for borrowing.\n";
        }
    }

    void returnBook(const std::string& title, std::stack<std::string>& actionStack) {
        Book* book = searchBook(title);
        if (book && book->isBorrowed) {
            book->isBorrowed = false;
            actionStack.push("borrow " + title);
            std::cout << "You have returned: " << title << "\n";
        } else {
            std::cout << "Book not found or not borrowed.\n";
        }
    }

    void undoLastAction(std::stack<std::string>& actionStack) {
        if (actionStack.empty()) {
            std::cout << "No actions to undo.\n";
            return;
        }
        std::string lastAction = actionStack.top();
        actionStack.pop();

        if (lastAction.find("return") != std::string::npos) {
            std::string title = lastAction.substr(7);
            returnBook(title, actionStack);
        } else if (lastAction.find("borrow") != std::string::npos) {
            std::string title = lastAction.substr(7);
            borrowBook(title, actionStack);
        }
    }

    ~BookInventory() {
        while (head) {
            Book* temp = head;
            head = head->next;
            delete temp;
        }
    }
};

int main() {
    BookInventory inventory;
    std::stack<std::string> actionStack;

    // Adding sample books
    inventory.addBook("1984", "George Orwell");
    inventory.addBook("To Kill a Mockingbird", "Harper Lee");
    inventory.addBook("The Great Gatsby", "F. Scott Fitzgerald");

    int choice;
    std::string title;

    do {
        std::cout << "\nE-Library Management System\n";
        std::cout << "1. Display Books\n";
        std::cout << "2. Borrow Book\n";
        std::cout << "3. Return Book\n";
        std::cout << "4. Undo Last Action\n";
        std::cout << "5. Exit\n";
        std::cout << "Choose an option: ";
        std::cin >> choice;

        switch (choice) {
            case 1:
                inventory.displayBooks();
                break;
            case 2:
                std::cout << "Enter the title of the book to borrow: ";
                std::cin.ignore();
                std::getline(std::cin, title);
                inventory.borrowBook(title, actionStack);
                break;
            case 3:
                std::cout << "Enter the title of the book to return: ";
                std::cin.ignore();
                std::getline(std::cin, title);
                inventory.returnBook(title, actionStack);
                break;
            case 4:
                inventory.undoLastAction(actionStack);
                break;
            case 5:
                std::cout << "Exiting...\n";
                break;
            default:
                std::cout << "Invalid choice. Please try again.\n";
        }
    } while (choice != 5);

    return 0;
}
