#include <iostream>
#include <vector>
#include <fstream>
#include <algorithm>
#include <iomanip>

struct Transaction {
    std::string type; // "income" or "expense"
    std::string description;
    double amount;
};

class FinanceTracker {
private:
    std::vector<Transaction> transactions;

public:
    void addTransaction(const std::string& type, const std::string& description, double amount) {
        transactions.push_back({type, description, amount});
    }

    void displayTransactions() {
        std::cout << std::fixed << std::setprecision(2);
        for (const auto& t : transactions) {
            std::cout << t.type << ": " << t.description << " - $" << t.amount << std::endl;
        }
    }

    void filterExpenses(double threshold) {
        std::cout << "Expenses over $" << threshold << ":\n";
        for (const auto& t : transactions) {
            if (t.type == "expense" && t.amount > threshold) {
                std::cout << t.description << " - $" << t.amount << std::endl;
            }
        }
    }

    void saveToFile(const std::string& filename) {
        std::ofstream file(filename);
        for (const auto& t : transactions) {
            file << t.type << "," << t.description << "," << t.amount << "\n";
        }
        file.close();
    }

    void loadFromFile(const std::string& filename) {
        std::ifstream file(filename);
        std::string line;
        while (std::getline(file, line)) {
            std::string type, description;
            double amount;
            size_t pos1 = line.find(',');
            size_t pos2 = line.find(',', pos1 + 1);
            type = line.substr(0, pos1);
            description = line.substr(pos1 + 1, pos2 - pos1 - 1);
            amount = std::stod(line.substr(pos2 + 1));
            transactions.push_back({type, description, amount});
        }
        file.close();
    }

    void displayBarChart() {
        double totalExpenses = 0;
        for (const auto& t : transactions) {
            if (t.type == "expense") {
                totalExpenses += t.amount;
            }
        }

        std::cout << "\nMonthly Spending Bar Chart:\n";
        for (const auto& t : transactions) {
            if (t.type == "expense") {
                int barLength = static_cast<int>((t.amount / totalExpenses) * 50); // Scale to 50 characters
                std::cout << t.description << ": " << std::string(barLength, '#') << " (" << t.amount << ")\n";
            }
        }
    }
};

int main() {
    FinanceTracker tracker;
    tracker.loadFromFile("transactions.txt");

    tracker.addTransaction("income", "Salary", 3000);
    tracker.addTransaction("expense", "Rent", 1200);
    tracker.addTransaction("expense", "Groceries", 250);
    tracker.addTransaction("expense", "Utilities", 150);
    tracker.addTransaction("expense", "Entertainment", 100);

    std::cout << "All Transactions:\n";
    tracker.displayTransactions();

    tracker.filterExpenses(100);
    
    tracker.saveToFile("transactions.txt");

    tracker.displayBarChart();

    return 0;
}
