#include <iostream>
#include <vector>
#include <thread>
#include <chrono>

class TowerOfHanoi {
private:
    std::vector<std::vector<int>> rods;
    int numDisks;

public:
    TowerOfHanoi(int n) : numDisks(n) {
        rods.resize(3); // Three rods
        for (int i = numDisks; i >= 1; --i) {
            rods[0].push_back(i); // Initialize the first rod with disks
        }
    }

    void moveDisk(int fromRod, int toRod) {
        if (rods[fromRod].empty()) return;

        int disk = rods[fromRod].back(); // Get the top disk from the source rod
        rods[fromRod].pop_back();         // Remove the disk from the source rod
        rods[toRod].push_back(disk);      // Place the disk on the destination rod

        // Display the current state of the rods
        displayRods();
        std::this_thread::sleep_for(std::chrono::milliseconds(500)); // Pause for visual effect
    }

    void solve(int n, int fromRod, int toRod, int auxRod) {
        if (n == 1) {
            moveDisk(fromRod, toRod); // Move a single disk
            return;
        }
        solve(n - 1, fromRod, auxRod, toRod); // Move n-1 disks to auxiliary rod
        moveDisk(fromRod, toRod);              // Move the nth disk to destination rod
        solve(n - 1, auxRod, toRod, fromRod); // Move the n-1 disks from auxiliary to destination rod
    }

    void displayRods() {
        std::cout << "\nCurrent State of Rods:\n";
        for (int i = 0; i < 3; ++i) {
            std::cout << "Rod " << i + 1 << ": ";
            for (int disk : rods[i]) {
                std::cout << disk << " ";
            }
            std::cout << "\n";
        }
        std::cout << "------------------------\n";
    }
};

int main() {
    int numDisks;

    std::cout << "Enter the number of disks: ";
    std::cin >> numDisks;

    TowerOfHanoi tower(numDisks);
    tower.displayRods(); // Initial state
    tower.solve(numDisks, 0, 1, 2); // Solve the Tower of Hanoi

    std::cout << "All disks have been moved to Rod 2!\n";

    return 0;
}
